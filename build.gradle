buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.1.6"
        classpath "org.grails.plugins:database-migration:3.0.3"
    }
}

plugins {
//    id 'application'
//    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
//    id 'org.springframework.boot' version '2.0.2.RELEASE'
    id 'org.owasp.dependencycheck' version '3.1.2'
//    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'org.sonarqube' version '2.6.2'
    id 'jacoco'
//    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.0.11"
}

version "0.1"
group "prd.organisation"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"

// CNP pipeline required plugins
apply plugin: 'org.owasp.dependencycheck'

apply from: 'liquibase.gradle'

repositories {
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"
    compile "org.grails:grails-datastore-rest-client"
    compile 'org.grails.plugins:database-migration:3.0.3'
    compile 'org.liquibase:liquibase-core:3.5.3'
    compile 'uk.gov.hmcts.reform:java-logging-appinsights:2.2.1'
    compile 'uk.gov.hmcts.reform:java-logging-spring:2.2.1'
    compile 'io.github.http-builder-ng:http-builder-ng-core:1.0.3'
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "org.postgresql:postgresql:9.4.1208.jre7"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-datastore-rest-client"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"
    testCompile 'com.stehno.ersatz:ersatz:1.8.1:safe@jar'
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = '0.7.9' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
}

def coverageExclusionList = [
    '**prd/organisation/**'
]

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusionList)
        })
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", coverageExclusionList.join(", ")
    }
}

task functional(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests'
//    setTestClassesDirs(sourceSets.aat.output.classesDirs)
//    setClasspath(sourceSets.aat.runtimeClasspath)
//    include "uk/gov/hmcts/reform/coh/functional/**"
//
//    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
//    setTestClassesDirs(sourceSets.aat.output.classesDirs)
//    setClasspath(sourceSets.aat.runtimeClasspath)
//    include "uk/gov/hmcts/reform/coh/smoke/**"
//
//    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

war.archiveName='rpa-prd-organisation.war'